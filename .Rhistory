jaccard(t(data))
data(kykladspecreg)
kykladspecreg
data(kykladspecreg)
t(kykladspecreg)
head(data)
data(data)
jaccard(data)
jaccard(as.numaric(data))
as.numeric(data)
library(xlsx)
data <- read.xlsx2("Nine point classification dataset_17th Oct_2016.xlsx",2)
data <- data[!apply(data == "", 1, all),]
rownames(data) <- data$Accession
head(data)
data[1:2] <- list(NULL)
head(data)
jacardCalculation <- dist(data, "binary")
head(jacardCalculation)
write.csv2(jacardCalculation, file = "jcardDistanceCaluclation.csv")
jacardCalculation
jacardCalculation <- as.matrix(dist(data, "binary"))
write.csv2(jacardCalculation, file = "jcardDistanceCaluclation.csv")
data <- read.xlsx2("Nine point classification dataset_17th Oct_2016.xlsx",2)
library(xlsx)
data <- read.xlsx2("Nine point classification dataset_17th Oct_2016.xlsx",2)
data <- data[!apply(data == "", 1, all),]
rownames(data) <- data$Accession
head(data)
data[1:2] <- list(NULL)
head(data)
jacardCalculation <- as.matrix(dist(data, "binary"))
jacardCalculation
rownames(jacardCalculation)
library(ggplot2)
library(plyr)
library(arm)
library(reshape2)
#rownames(jacardCalculation)
nba <- jacardCalculation
nba$Name <- with(nba, reorder(rownames(nba), PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(variable, rownames(nba))) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
rownames(nba)
)
))
nba <- jacardCalculation
nba.m <- melt(nba)
head(nba.m)
nba.m <- melt(nba)
head(nba.m)
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(variable, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
head(nba.m)
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
#rownames(jacardCalculation)
nba <- jacardCalculation
#nba$Name <- with(nba, reorder(rownames(nba), PTS))
nba.m <- melt(nba)
head(nba.m)
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
#rownames(jacardCalculation)
nba <- jacardCalculation
#nba$Name <- with(nba, reorder(rownames(nba), PTS))
nba.m <- melt(nba)
head(nba.m)
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
jpeg('matrix.jpg', width=1000, height=1000, unit='px')
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
dev.off()
jpeg('matrix.jpg', width=10000, height=10000, unit='px')
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
dev.off()
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
head(nba)
nba[1:20, -1]
dist_m <- as.matrix(dist(jacardCalculation))
dist_mi <- 1/dist_m # one over, as qgraph takes similarity matrices as input
library(qgraph)
jpeg('forcedraw.jpg', width=10000, height=10000, unit='px')
qgraph(dist_mi, layout='spring', vsize=3)
dev.off()
install.packages("qgraph")
#install.packages("qgraph")
head(nba)
dist_m <- as.matrix(dist(jacardCalculation))
dist_mi <- 1/dist_m # one over, as qgraph takes similarity matrices as input
library(qgraph)
jpeg('forcedraw.jpg', width=10000, height=10000, unit='px')
qgraph(dist_mi, layout='spring', vsize=3)
dev.off()
library(xlsx)
data <- read.xlsx2("Nine point classification dataset_17th Oct_2016.xlsx",2)
data <- data[!apply(data == "", 1, all),]
rownames(data) <- data$Accession
head(data)
data[1:2] <- list(NULL)
head(data)
jacardCalculation <- as.matrix(dist(data, "binary"))
head(jacardCalculation)
nba <- jacardCalculation
nba.m <- melt(nba)
head(nba.m)
jpeg('matrix.jpg', width=10000, height=10000, unit='px')
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = value)#rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
dev.off()
library(ggplot2)
library(plyr)
library(arm)
library(reshape2)
nba <- jacardCalculation
nba.m <- melt(nba)
head(nba.m)
jpeg('matrix.jpg', width=10000, height=10000, unit='px')
nba.m <- ddply(nba.m, .(Var2), transform,
rescale = value)#rescale = rescale(value))
(p <- ggplot(nba.m, aes(Var2, Var1)) + geom_tile(aes(fill = rescale),
colour = "white") + scale_fill_gradient(low = "white",
high = "steelblue")+geom_text(aes(label=round(rescale,1))))
dev.off()
library(xlsx)
data <- read.xlsx2("Nine point classification dataset_17th Oct_2016.xlsx",2)
data
data <- read.xlsx2("Datasets.xls")
library(xlsx)
data <- read.xlsx2("Datasets.xls")
data <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
data
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
dataPlus <  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
colnames(dataMinus)
colnames(dataPlus)
dataPlus <-  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
colnames(dataPlus)
rownames(dataMinus) <- data$Accession
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- data$Accession
rownames(dataMinus)
data$Accession
rownames(dataMinus) <- dataMinus$Accession
head(data)
dataMinus$Accession <- NULL
dataMinus$Accession
head(dataMinus)
fisher.test(dataMinus)
?fisher.test
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
fisher.test(dataMinus)
dataPlus <-  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataPlus) <- dataPlus$Accession
dataPlus$Accession <- NULL
head(dataPlus)
fisher.test(dataPlus)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
fisher.test(dataMinus)
dataPlus <-  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataPlus) <- dataPlus$Accession
dataPlus$Accession <- NULL
head(dataPlus)
fisher.test(dataPlus)
dataPlus <-  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataPlus) <- dataPlus$Accession
dataPlus$Accession <- NULL
head(dataPlus)
fisher.test(dataPlus)
N    <- 350
A    <- factor(rbinom(N, size=1, p=0.6), labels=c("pos", "neg"))
A
B    <- factor(rbinom(N, size=1, p=0.4), labels=c("pos", "neg"))
B
cTab <- table(A, B)
cTab
chisq.test(dataMinus)
chisq.test(as.numric(dataMinus))
chisq.test(as.numeric(dataMinus))
chisq.test(as.integer(dataMinus))
as.integer(dataMinus)
as.integer(dataMinus$Protein.family.Domains
as.integer(dataMinus$Protein.family.Domains)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
chisq.test(as.integer(dataMinus))
chisq.test(as.numeric(dataMinus))
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.numeric(as.character(dataMinus[i]))
}
chisq.test(as.numeric(dataMinus))
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.integer(as.character(dataMinus[i]))
}
chisq.test(as.numeric(dataMinus))
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.integer(as.character(dataMinus[i]))
}
dataMinus
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.numeric((dataMinus[i])
}
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.numeric(dataMinus[i])
}
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.numeric(dataMinus[i])
}
head(dataMinus)
chisq.test(dataMinus)
for (i in 1:ncol(dataMinus)){
dataMinus[,i] <- as.integer(dataMinus[i])
}
as.integer(dataMinus[i])
as.integer(dataMinus$Protein.family.Domains)
dataMinus[i]
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
sNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
f <- factorsNumeric(dataMinus)
sNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
as.Numeric))
f <- factorsNumeric(dataMinus)
sNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
as.numeric))
f <- factorsNumeric(dataMinus)
f
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
sNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
as.numeric))
dataMinus <- factorsNumeric(dataMinus)
chisq.test(dataMinus)
fisher.test(dataMinus)
dataPlus <-  read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataPlus) <- dataPlus$Accession
dataPlus$Accession <- NULL
head(dataPlus)
dataPlus <- factorsNumeric(dataPlus)
chisq.test(dataPlus)
library(arules)
install.packages("arules")
library(arules)
data("Adult")
## Mine frequent itemsets with Eclat.
Adult
fsets <- eclat(Adult, parameter = list(supp = 0.5))
fsets
fsets.top5 <- SORT(fsets)1:5?
fsets.top5 <- SORT(fsets)
fsets.top5 <- SORT(fsets)1:5?
SORT
fsets.top5 <- sort(fsets)
fsets.top5
fsets.top5 <- sort(fsets)1:5?
fsets.top5 <- sort(fsets)
inspect(fsets.top5)
as(items(fsets.top5), "list")
## Get the itemsets as a binary matrix
as(items(fsets.top5), "matrix")
as(items(fsets.top5), "ngCMatrix")
## Create transaction data set.
data <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("b","e"),
c("b","c","e"),
c("a","d","e"),
c("a","c"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
t <- as(data, "transactions")
t
data
f <- eclat(data, parameter = list(support = 0, tidLists = TRUE))
dim(tidLists(f))
tidLists(f)
as(tidLists(f), "list")
image(tidLists(f))
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
t <- as(dataMinus, "transactions")
t
f <- eclat(data, parameter = list(support = 0, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
f <- eclat(dataMinus, parameter = list(support = 0.5, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
f <- eclat(dataMinus, parameter = list(support = 0.7, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
write.csv(inspect(f), file = "aprioryResults.csv")
list(inspect(f))
as(items(f), "list")
as(items(f), "matrix")
as(items(f), "ngCMatrix")
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.7, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.7, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.5, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
t <- as(dataMinus, "transactions")
t
f <- eclat(dataMinus, parameter = list(support = 0.69, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
dataMinus
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.69, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.69, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
t <- as(dataMinus, "transactions")
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 1)
rownames(dataMinus) <- dataMinus$Accession
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
t <- as(dataMinus, "transactions")
## Mine itemsets with tidLists.
f <- eclat(dataMinus, parameter = list(support = 0.69, tidLists = TRUE))
## Get dimensions of the tidLists.
dim(tidLists(f))
## Coerce tidLists to list.
as(tidLists(f), "list")
## Inspect visually.
image(tidLists(f))
##Show the Frequent itemsets and respectives supports
inspect(f)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
dataMinus
sNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
as.numeric))
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
dataMinus <- factorsNumeric(dataMinus)
t <- as(dataMinus, "transactions")
library(xlsx)
dataMinus <- read.xlsx2("Datasets.xls" ,sheetIndex = 2)
rownames(dataMinus) <- dataMinus$Accession
dataMinus$Accession <- NULL
head(dataMinus)
t <- as(dataMinus, "transactions")
